html
  head
    title= title
    link(rel='stylesheet', href='/stylesheets/style.css')
    link(rel='stylesheet', href='/stylesheets/goals.css')
  body
    h1= title
    p Welcome #{username}!
    a(href='/signout') Log Out
    p
    a(href='/createGoal') Create New Goal!
    p
        
    ul.center
      <!-- Get all the info we need for each goal. -->
      <!-- Calculate and format hours. -->
      each goal in goals
        - var getHoursFromTime = function(timeHours) { return Math.trunc(timeHours); };
        - var getMinutesFromTime = function(timeHours) { return Math.trunc((timeHours * 60) % 60); };
        - var getDaysFromTime = function(timeMilliseconds) { return Math.trunc(timeMilliseconds / 86400000); };
        
        <!-- Get important time intervals -->
        - var daysElapsed = ((new Date()).getTime() / 86400000) - (goal.startTime / 86400000);
        - var endTime = goal.startTime + (goal.durationDays *  86400000);
        - var goalTimeRemaining = endTime - (new Date()).getTime();
        
        <!-- Day progress -->
        - var dayPercentHoursLogged = (goal.loggedDayHours / goal.totalHoursPerDay) * 100;
        - var dayPercentHoursLoggedStyle = Math.min(100, dayPercentHoursLogged) + "%";
        - var dayOnTrackDeltaTime = goal.totalHoursPerDay - goal.loggedDayHours;
        - var dayOnTrack = dayOnTrackDeltaTime < 0;
        - dayOnTrackDeltaTime = Math.abs(dayOnTrackDeltaTime);
        
        <!-- Week progress -->
        - var date = new Date();
        - var midnightSunday = new Date(date.getFullYear(), date.getMonth(), (date.getDate() - date.getDay()), 0,0,0);
        - var hoursSinceMidnightSunday = (date.getTime() - midnightSunday.getTime()) / 3600000;
        
        - var weekPercentOfTimePassed = ((hoursSinceMidnightSunday / 168) * 100).toFixed(2);
        - var weekPercentHoursLogged = ((goal.loggedWeekHours / goal.totalHoursPerWeek) * 100).toFixed(2);        
        - var weekPercentOfTimePassedStyle = Math.min(100, weekPercentOfTimePassed) + "%";
        - var weekPercentHoursLoggedStyle = Math.min((100 / weekPercentOfTimePassed) * 100, ((100 / weekPercentOfTimePassed) * weekPercentHoursLogged)) + "%";
        
        - var weekOnTrackDeltaTime = ((weekPercentOfTimePassed - weekPercentHoursLogged) / 100) * goal.totalHoursPerWeek;
        - var weekOnTrack = weekOnTrackDeltaTime < 0;
        - weekOnTrackDeltaTime = Math.abs(weekOnTrackDeltaTime);
        
        <!-- Total progress -->
        - var totalPercentOfTimePassed = ((daysElapsed / goal.durationDays) * 100).toFixed(2);
        - var totalPercentHoursLogged = ((goal.loggedTotalHours / goal.totalHoursToGoal) * 100).toFixed(2);
        - var totalPercentOfTimePassedStyle = Math.min(100, totalPercentOfTimePassed) + "%";
        - var totalPercentHoursLoggedStyle = Math.min((100 / totalPercentHoursLogged) * 100, ((100 / totalPercentOfTimePassed) * totalPercentHoursLogged)) + "%";
        
        - var totalOnTrackDeltaTime = ((totalPercentOfTimePassed - totalPercentHoursLogged) / 100) * goal.totalHoursToGoal;
        - var goalOnTrack = totalOnTrackDeltaTime < 0;
        - totalOnTrackDeltaTime = Math.abs(totalOnTrackDeltaTime);
        
        - var isPracticeGoal = goal.totalHoursToGoal < 0;
        - var roundBar = "border-radius:5px;"
        
        li.center.goalContainer(style="margin-bottom:15px;")
          h1 #{goal.title} 
          p= goal.description 
          p
                      
            <!-- Timer. -->
            - var timerStarted = goal.timerStart != 0;
            if timerStarted
              a(href='/goal/' + goal._id + '/toggleTimer') Stop Timer  
              p === Recording goal! ===  
            else
              a(href='/goal/' + goal._id + '/toggleTimer') Start Timer  
                
            <!-- Edit -->
            p
              a(href='/goal/' + goal._id + '/edit') Edit Goal 
              
          <!-- On track or not. -->
          if isPracticeGoal
            <!-- TOOD Show image -->
            <!-- p On track: #{weekOnTrack ? "Yes!" : "No."} -->
          else
            <!-- p On track: #{goalOnTrack ? "Yes!" : "No."} -->
          
          <!-- Goal status'. -->   
          p #[b Today]: #{dayOnTrack ? "You are ahead by" : "You still have to complete"} #{getHoursFromTime(dayOnTrackDeltaTime)} hours and #{getMinutesFromTime(dayOnTrackDeltaTime)} minutes.       
          
          .goalProgressBar 
            .goalProgressBarCompleted(style="width:#{dayPercentHoursLoggedStyle};#{dayPercentHoursLogged > 98 ? roundBar : ''}") 
              .progressBarText #{getHoursFromTime(goal.loggedDayHours)}hrs #{getMinutesFromTime(goal.loggedDayHours)}min / #{getHoursFromTime(goal.totalHoursPerDay)}hrs #{getMinutesFromTime(goal.totalHoursPerDay)}min
          br
          br 
            
          <!-- p Day status: #{getHoursFromTime(goal.loggedDayHours)}hrs #{getMinutesFromTime(goal.loggedDayHours)}min / #{getHoursFromTime(goal.totalHoursPerDay)}hrs #{getMinutesFromTime(goal.totalHoursPerDay)}min -->
          
          <!-- Week Progress -->
          p #[b This Week]: You are #{getHoursFromTime(weekOnTrackDeltaTime)} hours and #{getMinutesFromTime(weekOnTrackDeltaTime)} minutes #{weekOnTrack ? "ahead of" : "behind"} schedule. You still have to complete #{getHoursFromTime(goal.totalHoursPerWeek - goal.loggedWeekHours)} hours and #{getMinutesFromTime(goal.totalHoursPerWeek - goal.loggedWeekHours)} minutes this week.
          
          .goalProgressBar 
            .goalProgressBarTimePassed(style="width:#{weekPercentOfTimePassedStyle};#{weekPercentOfTimePassed > 98 ? roundBar : ''}")
              .goalProgressBarCompleted(style="width:#{weekPercentHoursLoggedStyle};#{weekPercentHoursLogged > 98 ? roundBar : ''}")
                .progressBarText #{getHoursFromTime(goal.loggedWeekHours)}hrs #{getMinutesFromTime(goal.loggedWeekHours)}min / #{getHoursFromTime(goal.totalHoursPerWeek)}hrs #{getMinutesFromTime(goal.totalHoursPerWeek)}min
          br
          br  
              
          <!--p DEBUG: -->
          <!--p Week status: #{getHoursFromTime(goal.loggedWeekHours)}hrs #{getMinutesFromTime(goal.loggedWeekHours)}min / #{getHoursFromTime(goal.totalHoursPerWeek)}hrs #{getMinutesFromTime(goal.totalHoursPerWeek)}min --> 
          
          <!-- Total Progress -->
          if !isPracticeGoal
            <!--p Week stats: At #{weekPercentHoursLogged}%, should be at #{weekPercentOfTimePassed}%. -->
            p #[b Today]: You are #{getHoursFromTime(totalOnTrackDeltaTime)} hours and #{getMinutesFromTime(totalOnTrackDeltaTime)} minutes #{goalOnTrack ? "ahead of" : "behind"} schedule. You still have #{getDaysFromTime(goalTimeRemaining)} days to complete remaining #{getHoursFromTime(goal.totalHoursToGoal - goal.loggedTotalHours)} hours and #{getMinutesFromTime(goal.totalHoursToGoal - goal.loggedTotalHours)} minutes.
            
            .goalProgressBar 
              .goalProgressBarTimePassed(style="width:#{totalPercentOfTimePassedStyle};#{totalPercentOfTimePassed > 98 ? roundBar : ''}")
                .goalProgressBarCompleted(style="width:#{totalPercentHoursLoggedStyle};#{totalPercentHoursLogged > 98 ? roundBar : ''}")
                  .progressBarText #{getHoursFromTime(goal.loggedTotalHours)}hrs #{getMinutesFromTime(goal.loggedTotalHours)}min / #{getHoursFromTime(goal.totalHoursToGoal)}hrs #{getMinutesFromTime(goal.totalHoursToGoal)}min
            
            <!-- DEBUG -->
            <!-- p Total status: #{getHoursFromTime(goal.loggedTotalHours)}hrs #{getMinutesFromTime(goal.loggedTotalHours)}min / #{getHoursFromTime(goal.totalHoursToGoal)}hrs #{getMinutesFromTime(goal.totalHoursToGoal)}min -->
            <!-- p Total stats: At #{totalPercentHoursLogged}%, should be at #{totalPercentOfTimePassed}%. -->
          